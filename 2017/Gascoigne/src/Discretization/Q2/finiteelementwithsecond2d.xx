/**
*
* Copyright (C) 2004, 2005 by the Gascoigne 3D authors
*
* This file is part of Gascoigne 3D
*
* Gascoigne 3D is free software: you can redistribute it
* and/or modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation, either
* version 3 of the License, or (at your option) any later
* version.
*
* Gascoigne 3D is distributed in the hope that it will be
* useful, but WITHOUT ANY WARRANTY; without even the implied
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
* PURPOSE.  See the GNU General Public License for more
* details.
*
* Please refer to the file LICENSE.TXT for further information
* on this license.
*
**/


#include  "finiteelementwithsecond.h"

namespace Gascoigne
{
template<int DIM, int BDIM, class TRAFO, class BASE>
inline void FiniteElementWithSecond<DIM,BDIM,TRAFO,BASE>::ComputeHesse
(const Vertex2d& xi) const
{
  Matrix tmp(2,2);

  const nvector<Matrix>& ddti = FiniteElement<DIM,BDIM,TRAFO,BASE>::T.DDTI(xi);
  Matrix dti_ = FiniteElement<DIM,BDIM,TRAFO,BASE>::T.DTI();
  dti_.transpose();
  
  for (int i=0;i<FiniteElement<DIM,BDIM,TRAFO,BASE>::n();++i)
    {
		// linear transformation
      hesse[i](0,0) = FiniteElement<DIM,BDIM,TRAFO,BASE>::B.phi_xx(i);
      hesse[i](1,0) = FiniteElement<DIM,BDIM,TRAFO,BASE>::B.phi_xy(i);
      hesse[i](0,1) = FiniteElement<DIM,BDIM,TRAFO,BASE>::B.phi_xy(i);
      hesse[i](1,1) = FiniteElement<DIM,BDIM,TRAFO,BASE>::B.phi_yy(i);

      FiniteElement<DIM,BDIM,TRAFO,BASE>::T.DTI().mmult(tmp,hesse[i]);
      tmp.mmult(hesse[i],dti_);
      
		// nonlinear transformation
      double xx = FiniteElement<DIM,BDIM,TRAFO,BASE>::B.phi_x(i) * ddti[0](0,0) + FiniteElement<DIM,BDIM,TRAFO,BASE>::B.phi_y(i) * ddti[0](1,0);
      double xy = FiniteElement<DIM,BDIM,TRAFO,BASE>::B.phi_x(i) * ddti[0](0,1) + FiniteElement<DIM,BDIM,TRAFO,BASE>::B.phi_y(i) * ddti[0](1,1);      
      double yy = FiniteElement<DIM,BDIM,TRAFO,BASE>::B.phi_x(i) * ddti[1](0,1) + FiniteElement<DIM,BDIM,TRAFO,BASE>::B.phi_y(i) * ddti[1](1,1);

      hesse[i](0,0) += xx;
      hesse[i](1,0) += xy;
      hesse[i](0,1) += xy;
      hesse[i](1,1) += yy;
    } 
}
}
