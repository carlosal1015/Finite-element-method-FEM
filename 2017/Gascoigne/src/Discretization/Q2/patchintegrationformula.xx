/**
*
* Copyright (C) 2004, 2005 by the Gascoigne 3D authors
*
* This file is part of Gascoigne 3D
*
* Gascoigne 3D is free software: you can redistribute it
* and/or modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation, either
* version 3 of the License, or (at your option) any later
* version.
*
* Gascoigne 3D is distributed in the hope that it will be
* useful, but WITHOUT ANY WARRANTY; without even the implied
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
* PURPOSE.  See the GNU General Public License for more
* details.
*
* Please refer to the file LICENSE.TXT for further information
* on this license.
*
**/


#include  "integrationformula.h"

namespace Gascoigne
{

/*------------------------------------------------------------*/

template<int N, class INT>
PatchFormula1d<N,INT>::PatchFormula1d() : IntegrationFormula1d(2*N)
{
  INT         I;

  assert(I.n()==N);

  for(int ii=0;ii<2;ii++)
    {
      for(int i=0;i<N;i++)
	{
	  int j = N*ii+i;
	  w(j) = 0.5*I.w(i);
	  Vertex1d pi;
	  I.xi(pi,i);
	  if(ii==0)
	    {
	      c(j).x() = 0.5*pi.x();
	    }		    
	  else		    
	    {		    
	      c(j).x() = 0.5*pi.x()+0.5;
	    }
	}
    }
}

/*------------------------------------------------------------*/
template<int N, class INT>
PatchFormula2d<N,INT>::PatchFormula2d() : IntegrationFormula2d(4*N)
{
  INT         I;

  assert(I.n()==N);

  for(int ii=0;ii<4;ii++)
    {
      for(int i=0;i<N;i++)
	{
	  int j = N*ii+i;
	  w(j) = 0.25*I.w(i);
	  Vertex2d pi;
	  I.xi(pi,i);
	  if(ii==0)
	    {
	      c(j).x() = 0.5*pi.x();
	      c(j).y() = 0.5*pi.y();
	    }		    
	  else if(ii==1)	    
	    {		    
	      c(j).x() = 0.5*pi.x()+0.5;
	      c(j).y() = 0.5*pi.y();
	    }		    
	  else if(ii==2)	    
	    {		    
	      c(j).x() = 0.5*pi.x();
	      c(j).y() = 0.5*pi.y()+0.5;
	    }		    
	  else		    
	    {		    
	      c(j).x() = 0.5*pi.x()+0.5;
	      c(j).y() = 0.5*pi.y()+0.5;
	    }
	}
    }
}

/*------------------------------------------------------------*/

template<int N, class INT>
PatchFormula3d<N,INT>::PatchFormula3d() : IntegrationFormula3d(8*N)
{
  INT         I;
  if(I.n()!=N) {std::cerr << "PatchFormula3d: error\n";abort();}
  for(int ii=0;ii<8;ii++)
    {
      for(int i=0;i<N;i++)
	{
	  int j = N*ii+i;
	  w(j) = 0.125*I.w(i);
	  Vertex3d pi;
	  I.xi(pi,i);
	  
	  c(j).equ(0.5,pi);
	  
	  if (ii>=4)
	    {
	      c(j).z() += 0.5;
	    }
	  if(ii%2==1)	    
	    {		    
	      c(j).x() += 0.5;
	    }	
	  int jj = ii%4;
	  if(jj>=2)	    
	    {		    
	      c(j).y() += 0.5;
	    }		    
	}
    }
}

}
