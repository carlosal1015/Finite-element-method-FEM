/**
*
* Copyright (C) 2004, 2005 by the Gascoigne 3D authors
*
* This file is part of Gascoigne 3D
*
* Gascoigne 3D is free software: you can redistribute it
* and/or modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation, either
* version 3 of the License, or (at your option) any later
* version.
*
* Gascoigne 3D is distributed in the hope that it will be
* useful, but WITHOUT ANY WARRANTY; without even the implied
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
* PURPOSE.  See the GNU General Public License for more
* details.
*
* Please refer to the file LICENSE.TXT for further information
* on this license.
*
**/


#include  "finiteelementwithsecond.h"

namespace Gascoigne
{
/*-----------------------------------------------------*/

template<int DIM, int BDIM, class TRAFO, class BASE>
 FiniteElementWithSecond<DIM,BDIM,TRAFO,BASE>::FiniteElementWithSecond() 
   :  FiniteElement<DIM,BDIM,TRAFO,BASE>()
{
  hesse.reserve(FiniteElement<DIM,BDIM,TRAFO,BASE>::n());
  hesse.resize(FiniteElement<DIM,BDIM,TRAFO,BASE>::n(),nmatrix<double> (DIM,DIM));
}

/*-----------------------------------------------------*/

template<int DIM, int BDIM, class TRAFO, class BASE>
inline void  FiniteElementWithSecond<DIM,BDIM,TRAFO,BASE>::init_test_hesse(TestFunction& N, double w, int i) const
{
  N.aux("xx") = w * hesse[i](0,0);
  N.aux("xy") = w * hesse[i](0,1);
  N.aux("yy") = w * hesse[i](1,1);
  N.D()       = N.aux("xx")+N.aux("yy");

  if(DIM==3)
  {
    N.aux("xz") = w * hesse[i](0,2);
    N.aux("yz") = w * hesse[i](1,2);
    N.aux("zz") = w * hesse[i](2,2); 
    N.D()      += N.aux("zz");
  }
}
}
